SUMMARIZER version 0.1.0 (based on CBMC 5.2)
Parsing main.c
Converting
Type-checking main
file main.c line 8 function main: function `assert' is not declared
Generating GOTO Program
Adding CPROVER library
Generic Property Instrumentation
Function Pointer Removal
Performing full inlining
Using intervals domain with ACDL solver
Computing SSA of _start
Simplifying
(not marked)
(E) $guard#0 == TRUE

(not marked)
(E) __CPROVER_dead_object#2 == NULL

(not marked)
(E) __CPROVER_deallocated#3 == NULL

(not marked)
(E) __CPROVER_malloc_is_new_array#4 == FALSE

(not marked)
(E) __CPROVER_malloc_object#5 == NULL

(not marked)
(E) __CPROVER_malloc_size#6 == 0ul

(not marked)
(E) __CPROVER_memory_leak#7 == NULL

(not marked)
(E) __CPROVER_next_thread_id#8 == 0ul

(not marked)
(E) __CPROVER_pipe_count#9 == 0u

(not marked)
(E) __CPROVER_rounding_mode#10 == 0

(not marked)
(E) __CPROVER_thread_id#11 == 0ul

(not marked)
(E) __CPROVER_threads_exited#12 == ARRAY_OF(FALSE)

(not marked)
(E) x#17 == 1

(not marked)
(E) y#18 == 4

(not marked)
(E) x#19 == 2

(not marked)
(A) x#19 == 2 || !$guard#0

(not marked)
(E) main#return_value#23 == nondet_symbol(ssa::nondet23.1)


_start
First push: $guard#0 == TRUE
Pop: $guard#0 == TRUE
Push: !(x#19 == 2 || !$guard#0)
Old: TRUE
New: $guard#0 == TRUE
Updated: $guard#0 == TRUE
Pop: !(x#19 == 2 || !$guard#0)
Selected vars: $guard#0 x#19
[ACDL-DOMAIN] old value: $guard#0 == TRUE
[ACDL-DOMAIN] projected(ssa::$guard#0): TRUE
[ACDL-DOMAIN] new_value(ssa::$guard#0): TRUE && TRUE
[ACDL-DOMAIN] projected(main::1::x#19): $guard#0 && TRUE
[ACDL-DOMAIN] new_value(main::1::x#19): $guard#0 && TRUE && x#19 <= 2147483647 && -((signed __CPROVER_bitvector[33])x#19) <= 2147483648
[ACDL-DOMAIN] new_value: x#19 <= 2147483647 && -((signed __CPROVER_bitvector[33])x#19) <= 2147483648 && $guard#0
Old: $guard#0 == TRUE
New: x#19 <= 2147483647 && -((signed __CPROVER_bitvector[33])x#19) <= 2147483648 && $guard#0
Updated: x#19 <= 2147483647 && -((signed __CPROVER_bitvector[33])x#19) <= 2147483648 && $guard#0 == TRUE && $guard#0
Propagation finished with UNKNOWN
[main.assertion.1] assertion x == 2: UNKNOWN

** 1 of 1 unknown
** 0 of 1 failed
VERIFICATION FAILED
EXIT=10
SIGNAL=0
