2LS version 0.3.4 (based on CBMC 5.4)
Parsing main.c
Converting
Type-checking main
file main.c line 5 function main: function `assert' is not declared
Generating GOTO Program
Adding CPROVER library
Generic Property Instrumentation
Function Pointer Removal
Performing full inlining
Using intervals domain with ACDL solver
Computing SSA of _start
Simplifying
(E) $guard#0 == TRUE

(E) __CPROVER_dead_object#2 == NULL

(E) __CPROVER_deallocated#3 == NULL

(E) __CPROVER_malloc_is_new_array#4 == FALSE

(E) __CPROVER_malloc_object#5 == NULL

(E) __CPROVER_malloc_size#6 == 0ul

(E) __CPROVER_memory_leak#7 == NULL

(E) __CPROVER_next_thread_id#8 == 0ul

(E) __CPROVER_pipe_count#9 == 0u

(E) __CPROVER_rounding_mode#10 == 0

(E) __CPROVER_thread_id#11 == 0ul

(E) __CPROVER_threads_exited#12 == ARRAY_OF(FALSE)

(E) x#16 == nondet_symbol(ssa::nondet16.1)

(E) x#17 == 0

(E) i#19 == nondet_symbol(ssa::nondet19.1)

(E) i#20 == 0

(E) x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
(E) i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
(E) $cond#21 == i#phi21 >= 7
(E) $guard#21 == $guard#0

(E) x#22 == i#phi21 + x#phi21
(E) $guard#22 == (!$cond#21 && $guard#21)

(E) i#23 == 1 + i#phi21

(E) $cond#24 == TRUE

(E) $guard#25 == ($cond#21 && $guard#21)
(A) !(x#phi21 >= 11) || !$guard#25

(E) main#return_value#28 == nondet_symbol(ssa::nondet28.1)


_start
Not inserting nondet elements 
Not inserting nondet elements 
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Push: x#22 == i#phi21 + x#phi21
Push: $guard#25 == ($cond#21 && $guard#21)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#17 == 0
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#22 == i#phi21 + x#phi21
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Push: $cond#21 == i#phi21 >= 7
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: i#23 == 1 + i#phi21
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: $cond#21 == i#phi21 >= 7
Push: $guard#21 == $guard#0
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: $guard#22 == (!$cond#21 && $guard#21)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Not inserting nondet elements 
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Not inserting nondet elements 
Not inserting nondet elements 
Not inserting nondet elements 
Push: i#20 == 0
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Push: $cond#21 == i#phi21 >= 7
Push: x#22 == i#phi21 + x#phi21
Push: i#23 == 1 + i#phi21
Not inserting nondet elements 
Not inserting nondet elements 
Not inserting nondet elements 
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Push: x#22 == i#phi21 + x#phi21
Push: $guard#22 == (!$cond#21 && $guard#21)
Push: i#23 == 1 + i#phi21
Push: $guard#25 == ($cond#21 && $guard#21)
Not inserting nondet elements 
Not inserting nondet elements 
Not inserting nondet elements 
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Push: $cond#21 == i#phi21 >= 7
Push: x#22 == i#phi21 + x#phi21
Not inserting nondet elements 
Push: $guard#0 == TRUE
Not inserting nondet elements 
Not inserting nondet elements 
Push: $guard#22 == (!$cond#21 && $guard#21)
Push: $guard#25 == ($cond#21 && $guard#21)
Not inserting nondet elements 
Not inserting nondet elements 
Not inserting nondet elements 
Push: $cond#21 == i#phi21 >= 7
Push: $guard#21 == $guard#0
Push: $guard#25 == ($cond#21 && $guard#21)
Not inserting nondet elements 
Not inserting nondet elements 
Not inserting nondet elements 
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Not inserting nondet elements 
Not inserting nondet elements 
Not inserting nondet elements 
Push: $guard#21 == $guard#0
Not inserting nondet elements 
The content of the sliced but unordered worklist is as follows: 
Sliced Unordered Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Sliced Unordered Worklist Element::x#22 == i#phi21 + x#phi21
Sliced Unordered Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Sliced Unordered Worklist Element::x#17 == 0
Sliced Unordered Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Sliced Unordered Worklist Element::$cond#21 == i#phi21 >= 7
Sliced Unordered Worklist Element::i#23 == 1 + i#phi21
Sliced Unordered Worklist Element::$guard#21 == $guard#0
Sliced Unordered Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Sliced Unordered Worklist Element::i#20 == 0
Sliced Unordered Worklist Element::$guard#0 == TRUE
Leaf Element::x#17 == 0
Leaf Element::i#20 == 0
Leaf Element::$guard#0 == TRUE
Intermediate Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Intermediate Worklist Element::x#22 == i#phi21 + x#phi21
Intermediate Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Intermediate Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Intermediate Worklist Element::$cond#21 == i#phi21 >= 7
Intermediate Worklist Element::i#23 == 1 + i#phi21
Intermediate Worklist Element::$guard#21 == $guard#0
Intermediate Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
The content of the ordered worklist is as follows: 
Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
Worklist Element::!$guard#ls24
Worklist Element::x#17 == 0
Worklist Element::i#20 == 0
Worklist Element::$guard#0 == TRUE
Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Worklist Element::x#22 == i#phi21 + x#phi21
Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Worklist Element::$cond#21 == i#phi21 >= 7
Worklist Element::i#23 == 1 + i#phi21
Worklist Element::$guard#21 == $guard#0
Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Printing all live variables
ssa::$cond#21,
ssa::$guard#0,
ssa::$guard#21,
ssa::$guard#22,
ssa::$guard#25,
ssa::$guard#ls24,
main::1::i#20,
main::1::i#23,
main::1::i#lb24,
main::1::i#phi21,
main::1::x#17,
main::1::x#22,
main::1::x#lb24,
main::1::x#phi21,
Printing all decision variables inside solver
$cond#21  ,
i#23  ,
x#22  ,
The additional constraint for the loop is: !$guard#ls24
Pop: !(!(x#phi21 >= 11) || !$guard#25)
Computing old abstract value of implication graph: 
Old: 
[ACDL-DOMAIN] old value: 
DOMAIN projected live variables are: $guard#25x#phi21
[ACDL-DOMAIN] projected(ssa::$guard#25): 
deducing in SAT
actually deducing
[ACDL-DOMAIN] deductions(ssa::$guard#25): $guard#25 <== 

[ACDL-DOMAIN] projected(main::1::x#phi21): 
RESULT: !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
IS_SUBSUMED: 
  !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
  
adding new value !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
[ACDL-DOMAIN] deductions(main::1::x#phi21): $guard#25 <== 
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) <== 

Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#22 == i#phi21 + x#phi21
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: $guard#25 == ($cond#21 && $guard#21)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Popped Statement for live variables: !(!(x#phi21 >= 11) || !$guard#25)
Variables in Popped Statement: $guard#25 x#phi21  
Live variables list are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
The content of the updated worklist is as follows: 
Updated Worklist Element::!$guard#ls24
Updated Worklist Element::x#17 == 0
Updated Worklist Element::i#20 == 0
Updated Worklist Element::$guard#0 == TRUE
Updated Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Updated Worklist Element::x#22 == i#phi21 + x#phi21
Updated Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Updated Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Updated Worklist Element::$cond#21 == i#phi21 >= 7
Updated Worklist Element::i#23 == 1 + i#phi21
Updated Worklist Element::$guard#21 == $guard#0
Updated Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Updated Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
The updated live variables after removal are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
New: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
Computing new abstract value of implication graph: 
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
Pop: !$guard#ls24
Computing old abstract value of implication graph: 
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
Old: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
[ACDL-DOMAIN] old value: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
DOMAIN projected live variables are: $guard#ls24
[ACDL-DOMAIN] projected(ssa::$guard#ls24): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
deducing in SAT
actually deducing
[ACDL-DOMAIN] deductions(ssa::$guard#ls24): !$guard#ls24 <== 

Not inserting nondet elements 
Not inserting nondet elements 
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Not inserting nondet elements 
Popped Statement for live variables: !$guard#ls24
Variables in Popped Statement: $guard#ls24  
Live variables list are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
The content of the updated worklist is as follows: 
Updated Worklist Element::x#17 == 0
Updated Worklist Element::i#20 == 0
Updated Worklist Element::$guard#0 == TRUE
Updated Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Updated Worklist Element::x#22 == i#phi21 + x#phi21
Updated Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Updated Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Updated Worklist Element::$cond#21 == i#phi21 >= 7
Updated Worklist Element::i#23 == 1 + i#phi21
Updated Worklist Element::$guard#21 == $guard#0
Updated Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Updated Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
The updated live variables after removal are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
New: !$guard#ls24
Computing new abstract value of implication graph: 
!$guard#ls24
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
Pop: x#17 == 0
Computing old abstract value of implication graph: 
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
Old: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
[ACDL-DOMAIN] old value: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
DOMAIN projected live variables are: x#17
[ACDL-DOMAIN] projected(main::1::x#17): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
RESULT: !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
track old_value: $guard#25
track old_value: !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
track old_value: !$guard#ls24
IS_SUBSUMED: 
  !(x#17 >= 1)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
adding new value !(x#17 >= 1)
IS_SUBSUMED: 
  !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
adding new value !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
[ACDL-DOMAIN] deductions(main::1::x#17): !(x#17 >= 1) <== 
!(-((signed __CPROVER_bitvector[33])x#17) >= 1) <== 

Not inserting nondet elements 
Not inserting nondet elements 
Push: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Not inserting nondet elements 
Popped Statement for live variables: x#17 == 0
Variables in Popped Statement: x#17  
Live variables list are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
The content of the updated worklist is as follows: 
Updated Worklist Element::i#20 == 0
Updated Worklist Element::$guard#0 == TRUE
Updated Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Updated Worklist Element::x#22 == i#phi21 + x#phi21
Updated Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Updated Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Updated Worklist Element::$cond#21 == i#phi21 >= 7
Updated Worklist Element::i#23 == 1 + i#phi21
Updated Worklist Element::$guard#21 == $guard#0
Updated Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Updated Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
The updated live variables after removal are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
New: !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
Computing new abstract value of implication graph: 
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
Pop: i#20 == 0
Computing old abstract value of implication graph: 
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
Old: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
[ACDL-DOMAIN] old value: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
DOMAIN projected live variables are: i#20
[ACDL-DOMAIN] projected(main::1::i#20): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
RESULT: !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
track old_value: $guard#25
track old_value: !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
track old_value: !$guard#ls24
track old_value: !(x#17 >= 1)
track old_value: !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
IS_SUBSUMED: 
  !(i#20 >= 1)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
adding new value !(i#20 >= 1)
IS_SUBSUMED: 
  !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
adding new value !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
[ACDL-DOMAIN] deductions(main::1::i#20): !(i#20 >= 1) <== 
!(-((signed __CPROVER_bitvector[33])i#20) >= 1) <== 

Not inserting nondet elements 
Not inserting nondet elements 
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Not inserting nondet elements 
Popped Statement for live variables: i#20 == 0
Variables in Popped Statement: i#20  
Live variables list are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
The content of the updated worklist is as follows: 
Updated Worklist Element::$guard#0 == TRUE
Updated Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Updated Worklist Element::x#22 == i#phi21 + x#phi21
Updated Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Updated Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Updated Worklist Element::$cond#21 == i#phi21 >= 7
Updated Worklist Element::i#23 == 1 + i#phi21
Updated Worklist Element::$guard#21 == $guard#0
Updated Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Updated Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
The updated live variables after removal are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
New: !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
Computing new abstract value of implication graph: 
!(i#20 >= 1)
!(-((signed __CPROVER_bitvector[33])i#20) >= 1)
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
!(i#20 >= 1)
!(-((signed __CPROVER_bitvector[33])i#20) >= 1)
Pop: $guard#0 == TRUE
Computing old abstract value of implication graph: 
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
!(i#20 >= 1)
!(-((signed __CPROVER_bitvector[33])i#20) >= 1)
Old: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
[ACDL-DOMAIN] old value: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
DOMAIN projected live variables are: $guard#0
[ACDL-DOMAIN] projected(ssa::$guard#0): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
deducing in SAT
actually deducing
[ACDL-DOMAIN] deductions(ssa::$guard#0): $guard#0 <== 

Not inserting nondet elements 
Not inserting nondet elements 
Push: $guard#21 == $guard#0
Not inserting nondet elements 
Popped Statement for live variables: $guard#0 == TRUE
Variables in Popped Statement: $guard#0  
Live variables list are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
The content of the updated worklist is as follows: 
Updated Worklist Element::x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Updated Worklist Element::x#22 == i#phi21 + x#phi21
Updated Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Updated Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Updated Worklist Element::$cond#21 == i#phi21 >= 7
Updated Worklist Element::i#23 == 1 + i#phi21
Updated Worklist Element::$guard#21 == $guard#0
Updated Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Updated Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
The updated live variables after removal are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
New: $guard#0
Computing new abstract value of implication graph: 
$guard#0
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
!(i#20 >= 1)
!(-((signed __CPROVER_bitvector[33])i#20) >= 1)
$guard#0
Pop: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Computing old abstract value of implication graph: 
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
!(i#20 >= 1)
!(-((signed __CPROVER_bitvector[33])i#20) >= 1)
$guard#0
Old: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
[ACDL-DOMAIN] old value: $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
DOMAIN projected live variables are: $guard#ls24x#17x#lb24x#phi21
[ACDL-DOMAIN] projected(ssa::$guard#ls24): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
deducing in SAT
actually deducing
[ACDL-DOMAIN] deductions(ssa::$guard#ls24): $guard#ls24 <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)

[ACDL-DOMAIN] projected(main::1::x#17): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
RESULT: !(-((signed __CPROVER_bitvector[33])x#17) >= -10)
track old_value: $guard#25
track old_value: !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
track old_value: !$guard#ls24
track old_value: !(i#20 >= 1)
track old_value: !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
track old_value: $guard#0
IS_SUBSUMED: 
  !(-((signed __CPROVER_bitvector[33])x#17) >= -10)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
adding new value !(-((signed __CPROVER_bitvector[33])x#17) >= -10)
[ACDL-DOMAIN] deductions(main::1::x#17): $guard#ls24 <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= -10) <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24

[ACDL-DOMAIN] projected(main::1::x#lb24): $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
RESULT: FALSE
track old_value: $guard#25
track old_value: !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
track old_value: !$guard#ls24
track old_value: !(x#17 >= 1)
track old_value: !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
track old_value: !(i#20 >= 1)
track old_value: !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
track old_value: $guard#0
IS_SUBSUMED: 
  FALSE
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
adding new value FALSE
[ACDL-DOMAIN] deductions(main::1::x#lb24): $guard#ls24 <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= -10) <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
FALSE <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)

[ACDL-DOMAIN] projected(main::1::x#phi21): $guard#25 && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
RESULT: !(x#phi21 >= 1) && !(-((signed __CPROVER_bitvector[33])x#phi21) >= 1)
track old_value: $guard#25
track old_value: !$guard#ls24
track old_value: !(x#17 >= 1)
track old_value: !(-((signed __CPROVER_bitvector[33])x#17) >= 1)
track old_value: !(i#20 >= 1)
track old_value: !(-((signed __CPROVER_bitvector[33])i#20) >= 1)
track old_value: $guard#0
IS_SUBSUMED: 
  !(x#phi21 >= 1)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
adding new value !(x#phi21 >= 1)
IS_SUBSUMED: 
  !(-((signed __CPROVER_bitvector[33])x#phi21) >= 1)
  $guard#25 && !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1) && !(-((signed __CPROVER_bitvector[33])x#17) >= 1) && !(i#20 >= 1) && !(-((signed __CPROVER_bitvector[33])i#20) >= 1) && $guard#0
[ACDL-DOMAIN] deductions(main::1::x#phi21): $guard#ls24 <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= -10) <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24
FALSE <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)
!(x#phi21 >= 1) <== !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10) && !$guard#ls24 && !(x#17 >= 1)

[ADD DEDUCTIONS] 2 -> 9
[ADD DEDUCTIONS] !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)@level :0#decision: 0 -> $guard#ls24@level: 0#decision: 0
[ADD DEDUCTIONS] 3 -> 9
[ADD DEDUCTIONS] !$guard#ls24@level :0#decision: 0 -> $guard#ls24@level: 0#decision: 0
[ADD DEDUCTIONS] 4 -> 9
[ADD DEDUCTIONS] !(x#17 >= 1)@level :0#decision: 0 -> $guard#ls24@level: 0#decision: 0
[ADD DEDUCTIONS] 2 -> 10
[ADD DEDUCTIONS] !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)@level :0#decision: 0 -> !(-((signed __CPROVER_bitvector[33])x#17) >= -10)@level: 0#decision: 0
[ADD DEDUCTIONS] 3 -> 10
[ADD DEDUCTIONS] !$guard#ls24@level :0#decision: 0 -> !(-((signed __CPROVER_bitvector[33])x#17) >= -10)@level: 0#decision: 0
[ADD DEDUCTIONS] 2 -> 11
[ADD DEDUCTIONS] !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)@level :0#decision: 0 -> FALSE@level: 0#decision: 0
[ADD DEDUCTIONS] 3 -> 11
[ADD DEDUCTIONS] !$guard#ls24@level :0#decision: 0 -> FALSE@level: 0#decision: 0
[ADD DEDUCTIONS] 4 -> 11
[ADD DEDUCTIONS] !(x#17 >= 1)@level :0#decision: 0 -> FALSE@level: 0#decision: 0
[ADD DEDUCTIONS] 2 -> 12
[ADD DEDUCTIONS] !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)@level :0#decision: 0 -> !(x#phi21 >= 1)@level: 0#decision: 0
[ADD DEDUCTIONS] 3 -> 12
[ADD DEDUCTIONS] !$guard#ls24@level :0#decision: 0 -> !(x#phi21 >= 1)@level: 0#decision: 0
[ADD DEDUCTIONS] 4 -> 12
[ADD DEDUCTIONS] !(x#17 >= 1)@level :0#decision: 0 -> !(x#phi21 >= 1)@level: 0#decision: 0
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#17 == 0
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: x#22 == i#phi21 + x#phi21
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Not inserting nondet elements 
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Push: !(!(x#phi21 >= 11) || !$guard#25)
Popped Statement for live variables: x#phi21 == ($guard#ls24 ? x#lb24 : x#17)
Variables in Popped Statement: $guard#ls24 x#17 x#lb24 x#phi21  
Live variables list are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#lb24x#phi21 
Deleted live variables are: x#lb24
The content of the updated worklist is as follows: 
Updated Worklist Element::x#22 == i#phi21 + x#phi21
Updated Worklist Element::$guard#25 == ($cond#21 && $guard#21)
Updated Worklist Element::i#phi21 == ($guard#ls24 ? i#lb24 : i#20)
Updated Worklist Element::$cond#21 == i#phi21 >= 7
Updated Worklist Element::i#23 == 1 + i#phi21
Updated Worklist Element::$guard#21 == $guard#0
Updated Worklist Element::$guard#22 == (!$cond#21 && $guard#21)
Updated Worklist Element::!(!(x#phi21 >= 11) || !$guard#25)
Updated Worklist Element::x#17 == 0
The updated live variables after removal are as follows: $cond#21$guard#0$guard#21$guard#22$guard#25$guard#ls24i#20i#23i#lb24i#phi21x#17x#22x#phi21 
New: $guard#ls24 && !(-((signed __CPROVER_bitvector[33])x#17) >= -10) && FALSE && !(x#phi21 >= 1)
Computing new abstract value of implication graph: 
$guard#ls24
!(-((signed __CPROVER_bitvector[33])x#17) >= -10)
FALSE
!(x#phi21 >= 1)
$guard#25
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)
!$guard#ls24
!(x#17 >= 1)
!(-((signed __CPROVER_bitvector[33])x#17) >= 1)
!(i#20 >= 1)
!(-((signed __CPROVER_bitvector[33])i#20) >= 1)
$guard#0
$guard#ls24
!(-((signed __CPROVER_bitvector[33])x#17) >= -10)
FALSE
!(x#phi21 >= 1)
Propagation finished with BOTTOM
****************************************************
 IMPLICATION GRAPH AFTER DEDUCTION PHASE
****************************************************
Printing Graph Output -- Total Valid Nodes: 12, Total deleted Nodes: 0
2 -> 9
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)  @level:0 @decision:0 -> $guard#ls24 @level:0 @decision:0
2 -> 10
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)  @level:0 @decision:0 -> !(-((signed __CPROVER_bitvector[33])x#17) >= -10) @level:0 @decision:0
2 -> 11
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)  @level:0 @decision:0 -> FALSE @level:0 @decision:0
2 -> 12
!(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)  @level:0 @decision:0 -> !(x#phi21 >= 1) @level:0 @decision:0
3 -> 9
!$guard#ls24  @level:0 @decision:0 -> $guard#ls24 @level:0 @decision:0
3 -> 10
!$guard#ls24  @level:0 @decision:0 -> !(-((signed __CPROVER_bitvector[33])x#17) >= -10) @level:0 @decision:0
3 -> 11
!$guard#ls24  @level:0 @decision:0 -> FALSE @level:0 @decision:0
3 -> 12
!$guard#ls24  @level:0 @decision:0 -> !(x#phi21 >= 1) @level:0 @decision:0
4 -> 9
!(x#17 >= 1)  @level:0 @decision:0 -> $guard#ls24 @level:0 @decision:0
4 -> 11
!(x#17 >= 1)  @level:0 @decision:0 -> FALSE @level:0 @decision:0
4 -> 12
!(x#17 >= 1)  @level:0 @decision:0 -> !(x#phi21 >= 1) @level:0 @decision:0
Node number: 1  Expression: $guard#25  In edges: 0  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 2  Expression: !(-((signed __CPROVER_bitvector[33])x#phi21) >= -10)  In edges: 0  Out edges: 4 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 3  Expression: !$guard#ls24  In edges: 0  Out edges: 4 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 4  Expression: !(x#17 >= 1)  In edges: 0  Out edges: 3 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 5  Expression: !(-((signed __CPROVER_bitvector[33])x#17) >= 1)  In edges: 0  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 6  Expression: !(i#20 >= 1)  In edges: 0  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 7  Expression: !(-((signed __CPROVER_bitvector[33])i#20) >= 1)  In edges: 0  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 8  Expression: $guard#0  In edges: 0  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 9  Expression: $guard#ls24  In edges: 3  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 10  Expression: !(-((signed __CPROVER_bitvector[33])x#17) >= -10)  In edges: 2  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 11  Expression: FALSE  In edges: 3  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
Node number: 12  Expression: !(x#phi21 >= 1)  In edges: 3  Out edges: 0 Decision: 0 Deleted: 0 Marked: 0  DL vector: 0   
[main.assertion.1] assertion x <= 10: OK

** 0 of 1 unknown
** 0 of 1 failed
VERIFICATION SUCCESSFUL
EXIT=0
SIGNAL=0
