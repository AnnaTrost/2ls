SUMMARIZER version tbd
file /home/bjowac/deltacheck/branches/summary/regression/svcomp14/ldv-regression/alt_test.c_false.cil.c: Parsing
Converting
Type-checking alt_test.c_false.cil
Generating GOTO Program
Adding CPROVER library
Partial Inlining
Generic Property Instrumentation
Function Pointer Removal
Using zones domain with binary search solver
Computing SSA of main
Simplifying
Computing SSA of c::__CPROVER_initialize
Simplifying
Computing SSA of c::malloc
Simplifying
Computing SSA of c::free
Simplifying
Computing SSA of c::__blast_assert
Simplifying
Computing SSA of c::l_malloc
Simplifying
Computing SSA of c::l_free
Simplifying
Computing SSA of c::main
Simplifying

Summarizing function main
substituting default value for ("symbol" "type" ("signedbv" "width" ("32") "#c_type" ("signed_int")) "identifier" ("c::argc'#4"))
substituting default value for ("symbol" "type" ("signedbv" "width" ("32") "#c_type" ("signed_int")) "identifier" ("c::argc'"))
Recursively summarizing function c::main
substituting default value for ("symbol" "type" ("signedbv" "width" ("32") "#c_type" ("signed_int")) "identifier" ("c::main::argc"))
Recursively summarizing function c::l_free
Recursively summarizing function c::__blast_assert

Summary for function c::__blast_assert
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::__blast_assert

Summary for function c::l_free
params: ptr 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak globalState 
globals_out: __CPROVER_malloc_is_new_array#phi104 __CPROVER_deallocated#phi121 __CPROVER_malloc_object#phi104 __CPROVER_memory_leak#phi121 globalState#104 
precondition: TRUE
transformer: TRUE ==> (signed int)globalState - (signed int)globalState#104 <= 2147483647 && (signed int)globalState#104 - (signed int)globalState <= 2147483648 && globalState#104 <= 0 && -((signed int)globalState#104) <= 0

Adding loop invariant: TRUE
Replacing function c::l_free
Using existing summary for function c::l_free
Replacing function c::l_free
Recursively summarizing function c::l_malloc

Summary for function c::l_malloc
params: size 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak globalState __CPROVER_malloc_size 
globals_out: __CPROVER_malloc_is_new_array#70 __CPROVER_deallocated#66 __CPROVER_malloc_object#68 __CPROVER_memory_leak#72 l_malloc#return_value#85 globalState#phi85 __CPROVER_malloc_size#69 
precondition: TRUE
transformer: TRUE ==> (signed int)size - (signed int)globalState#phi85 <= 4294967295 && (signed int)globalState#phi85 - (signed int)size <= 4294967295 && (signed int)size - (signed int)__CPROVER_malloc_size#69 <= 2147483647 && (signed __CPROVER_bitvector[66])__CPROVER_malloc_size#69 - (signed __CPROVER_bitvector[66])size <= 18446744075857035263 && (signed int)globalState - (signed int)globalState#phi85 <= 0 && (signed int)globalState#phi85 - (signed int)globalState <= 0 && (signed int)globalState - (signed int)__CPROVER_malloc_size#69 <= 2147483647 && (signed __CPROVER_bitvector[66])__CPROVER_malloc_size#69 - (signed __CPROVER_bitvector[66])globalState <= 18446744075857035263 && (signed __CPROVER_bitvector[66])__CPROVER_malloc_size - (signed __CPROVER_bitvector[66])globalState#phi85 <= 18446744075857035263 && (signed int)globalState#phi85 - (signed int)__CPROVER_malloc_size <= 2147483647 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#69 <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#69 - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size <= 18446744073709551615 && globalState#phi85 <= 2147483647 && -((signed int)globalState#phi85) <= 2147483648 && (signed int)globalState#phi85 - (signed int)__CPROVER_malloc_size#69 <= 2147483647 && (signed __CPROVER_bitvector[66])__CPROVER_malloc_size#69 - (signed __CPROVER_bitvector[66])globalState#phi85 <= 18446744075857035263 && __CPROVER_malloc_size#69 <= 18446744073709551615ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#69) <= 0

Adding loop invariant: TRUE
Replacing function c::l_malloc
substituting default value for ("symbol" "type" ("signedbv" "width" ("32") "#c_type" ("signed_int")) "identifier" ("c::main::argc"))

Summary for function c::main
params: argc argv 
returns: 
globals_in: 
globals_out: l_malloc#return_value#139 main#return_value#140 
precondition: TRUE
transformer: TRUE ==> (signed int)argc - (signed int)main#return_value#140 <= 2147483647 && (signed int)main#return_value#140 - (signed int)argc <= 2147483648 && main#return_value#140 <= 0 && -((signed int)main#return_value#140) <= 0

Adding loop invariant: TRUE
Replacing function c::main
Recursively summarizing function c::__CPROVER_initialize

Summary for function c::__CPROVER_initialize
params: 
returns: 
globals_in: __CPROVER_threads_exited __CPROVER_malloc_is_new_array __CPROVER_dead_object __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_rounding_mode globalState __CPROVER_pipe_count __CPROVER_malloc_size __CPROVER_next_thread_id 
globals_out: __CPROVER_threads_exited#7 __CPROVER_malloc_is_new_array#13 __CPROVER_dead_object#10 __CPROVER_deallocated#9 __CPROVER_malloc_object#11 __CPROVER_memory_leak#14 __CPROVER_rounding_mode#15 globalState#16 __CPROVER_pipe_count#6 __CPROVER_malloc_size#12 __CPROVER_next_thread_id#8 
precondition: TRUE
transformer: TRUE ==> __CPROVER_rounding_mode#15 <= 0 && -((signed int)__CPROVER_rounding_mode#15) <= 0 && globalState#16 <= 0 && -((signed int)globalState#16) <= 0 && __CPROVER_pipe_count#6 <= 0u && -((signed __CPROVER_bitvector[33])__CPROVER_pipe_count#6) <= 0 && __CPROVER_malloc_size#12 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#12) <= 0 && __CPROVER_next_thread_id#8 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_next_thread_id#8) <= 0

Adding loop invariant: TRUE
Replacing function c::__CPROVER_initialize

Summary for function main
params: 
returns: 
globals_in: argv' argc' 
globals_out: argv'#4 argc'#4 
precondition: TRUE
transformer: TRUE ==> (signed int)argc' - (signed int)argc'#4 <= 0 && (signed int)argc'#4 - (signed int)argc' <= 0 && argc'#4 <= 268435456 && -((signed int)argc'#4) <= -1

Adding loop invariant: TRUE

Summarizing function c::__CPROVER_initialize
Summary for function c::__CPROVER_initialize exists already

Summarizing function c::malloc

Summary for function c::malloc
params: malloc_size 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_malloc_size 
globals_out: __CPROVER_malloc_is_new_array#26 __CPROVER_deallocated#22 __CPROVER_malloc_object#24 __CPROVER_memory_leak#28 malloc#return_value#29 __CPROVER_malloc_size#25 
precondition: TRUE
transformer: TRUE ==> (signed __CPROVER_bitvector[65])malloc_size - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 - (signed __CPROVER_bitvector[65])malloc_size <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size <= 18446744073709551615 && __CPROVER_malloc_size#25 <= 18446744073709551615ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25) <= 0

Adding loop invariant: TRUE

Summarizing function c::free

Summary for function c::free
params: ptr 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak 
globals_out: __CPROVER_malloc_is_new_array __CPROVER_deallocated#phi48 __CPROVER_malloc_object __CPROVER_memory_leak#phi48 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE

Summarizing function c::__blast_assert
Summary for function c::__blast_assert exists already

Summarizing function c::l_malloc
Summary for function c::l_malloc exists already

Summarizing function c::l_free
Summary for function c::l_free exists already

Summarizing function c::main
Summary for function c::main exists already
Checking properties of main
Checking properties of c::__CPROVER_initialize
Checking properties of c::malloc
Checking properties of c::free
negated property !DYNAMIC_OBJECT(ptr)
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
604 variables, 1726 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
negated property !(POINTER_OFFSET(ptr) == 0)
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
600 variables, 1739 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
negated property TRUE
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
599 variables, 1706 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
negated property __CPROVER_malloc_object == ptr && __CPROVER_malloc_is_new_array
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
600 variables, 1706 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Checking properties of c::__blast_assert
negated property TRUE
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1 variables, 0 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Checking properties of c::l_malloc
Checking properties of c::l_free
negated property !DYNAMIC_OBJECT(ptr#107)
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1193 variables, 3227 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
negated property !(POINTER_OFFSET(ptr#107) == 0)
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1189 variables, 3240 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
negated property TRUE
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1188 variables, 3207 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
negated property __CPROVER_malloc_object#phi104 == ptr#107 && __CPROVER_malloc_is_new_array#phi104
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1188 variables, 3335 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Checking properties of c::main
[.0] free called for new[] object: FAILURE
[__blast_assert.1.0] error label: FAILURE
[l_free.1.0] free argument is dynamic object: FAILURE
[l_free.2.0] free argument has offset zero: FAILURE
[l_free.3.0] double free: FAILURE
[l_free.4.0] free called for new[] object: FAILURE

** 6 of 6 failed
VERIFICATION FAILED
