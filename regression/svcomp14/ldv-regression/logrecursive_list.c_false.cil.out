SUMMARIZER version tbd
file /home/bjowac/deltacheck/branches/summary/regression/svcomp14/ldv-regression/recursive_list.c_false.cil.c: Parsing
Converting
Type-checking recursive_list.c_false.cil
Generating GOTO Program
Adding CPROVER library
Partial Inlining
Generic Property Instrumentation
Function Pointer Removal
Using equalities domain 
Computing SSA of main
Simplifying
Computing SSA of c::__CPROVER_initialize
Simplifying
Computing SSA of c::err
Simplifying
Computing SSA of c::malloc
Simplifying
Computing SSA of c::allocate_memory
Simplifying
Computing SSA of c::append
Simplifying
Computing SSA of c::main
Simplifying

Summarizing function main
Recursively summarizing function c::main
Recursively summarizing function c::err

Summary for function c::err
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::err
Recursively summarizing function c::append
Recursively summarizing function c::allocate_memory

Summary for function c::allocate_memory
params: 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_malloc_size 
globals_out: __CPROVER_malloc_is_new_array#49 __CPROVER_deallocated#45 __CPROVER_malloc_object#47 __CPROVER_memory_leak#51 allocate_memory#return_value#58 __CPROVER_malloc_size#48 
precondition: TRUE
transformer: TRUE ==> __CPROVER_deallocated#45 != allocate_memory#return_value#58 && allocate_memory#return_value#58 != NULL

Adding loop invariant: __CPROVER_deallocated#45 != allocate_memory#return_value#58 && allocate_memory#return_value#58 != NULL
Replacing function c::allocate_memory

Summary for function c::append
params: l n 
returns: 
globals_in: 
globals_out: allocate_memory#return_value#65 append#return_value#70 
precondition: TRUE
transformer: TRUE ==> allocate_memory#return_value#65 != NULL

Adding loop invariant: allocate_memory#return_value#65 != NULL
Replacing function c::append
Using existing summary for function c::append
Replacing function c::append

Summary for function c::main
params: 
returns: 
globals_in: 
globals_out: append#return_value#phi92 main#return_value#92 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::main
Recursively summarizing function c::__CPROVER_initialize

Summary for function c::__CPROVER_initialize
params: 
returns: 
globals_in: __CPROVER_threads_exited __CPROVER_malloc_is_new_array __CPROVER_dead_object __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_rounding_mode i __CPROVER_pipe_count __CPROVER_malloc_size __CPROVER_next_thread_id 
globals_out: __CPROVER_threads_exited#4 __CPROVER_malloc_is_new_array#10 __CPROVER_dead_object#7 __CPROVER_deallocated#6 __CPROVER_malloc_object#8 __CPROVER_memory_leak#11 __CPROVER_rounding_mode#12 i#13 __CPROVER_pipe_count#3 __CPROVER_malloc_size#9 __CPROVER_next_thread_id#5 
precondition: TRUE
transformer: TRUE ==> __CPROVER_rounding_mode#12 <= 0 && -((signed int)__CPROVER_rounding_mode#12) <= 0 && i#13 <= 1 && -((signed int)i#13) <= -1 && __CPROVER_pipe_count#3 <= 0u && -((signed __CPROVER_bitvector[33])__CPROVER_pipe_count#3) <= 0 && __CPROVER_malloc_size#9 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#9) <= 0 && __CPROVER_next_thread_id#5 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_next_thread_id#5) <= 0

Adding loop invariant: TRUE
Replacing function c::__CPROVER_initialize

Summary for function main
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE

Summarizing function c::__CPROVER_initialize
Summary for function c::__CPROVER_initialize exists already

Summarizing function c::err
Summary for function c::err exists already

Summarizing function c::malloc

Summary for function c::malloc
params: malloc_size 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_malloc_size 
globals_out: __CPROVER_malloc_is_new_array#26 __CPROVER_deallocated#22 __CPROVER_malloc_object#24 __CPROVER_memory_leak#28 malloc#return_value#29 __CPROVER_malloc_size#25 
precondition: TRUE
transformer: TRUE ==> __CPROVER_deallocated#22 != malloc#return_value#29 && malloc#return_value#29 != NULL

Adding loop invariant: __CPROVER_deallocated#22 != malloc#return_value#29 && malloc#return_value#29 != NULL

Summarizing function c::allocate_memory
Summary for function c::allocate_memory exists already

Summarizing function c::append
Summary for function c::append exists already

Summarizing function c::main
Summary for function c::main exists already
Checking properties of main
Checking properties of c::__CPROVER_initialize
Checking properties of c::err
negated property TRUE
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1 variables, 0 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Checking properties of c::malloc
Checking properties of c::allocate_memory
Checking properties of c::append
Checking properties of c::main
[err.1.0] error label: FAILURE

** 1 of 1 failed
VERIFICATION FAILED
