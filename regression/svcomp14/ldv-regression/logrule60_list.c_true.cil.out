SUMMARIZER version tbd
file /home/bjowac/deltacheck/branches/summary/regression/svcomp14/ldv-regression/rule60_list.c_true.cil.c: Parsing
Converting
Type-checking rule60_list.c_true.cil
Generating GOTO Program
Adding CPROVER library
Partial Inlining
Generic Property Instrumentation
Function Pointer Removal
Using zones domain with binary search solver
Computing SSA of main
Simplifying
Computing SSA of c::__CPROVER_initialize
Simplifying
Computing SSA of c::__blast_assert
Simplifying
Computing SSA of c::malloc
Simplifying
Computing SSA of c::list_add
Simplifying
Computing SSA of c::list_del
Simplifying
Computing SSA of c::main
Simplifying

Summarizing function main
Recursively summarizing function c::__CPROVER_initialize

Summary for function c::__CPROVER_initialize
params: 
returns: 
globals_in: __CPROVER_threads_exited __CPROVER_malloc_is_new_array __CPROVER_dead_object __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak head.next head.prev __CPROVER_rounding_mode head.inserted __CPROVER_pipe_count head.$pad0 __CPROVER_malloc_size __CPROVER_next_thread_id 
globals_out: __CPROVER_threads_exited#4 __CPROVER_malloc_is_new_array#10 __CPROVER_dead_object#7 __CPROVER_deallocated#6 __CPROVER_malloc_object#8 __CPROVER_memory_leak#11 head.next#13 head.prev#13 __CPROVER_rounding_mode#12 head.inserted#13 __CPROVER_pipe_count#3 head.$pad0#13 __CPROVER_malloc_size#9 __CPROVER_next_thread_id#5 
precondition: TRUE
transformer: TRUE ==> __CPROVER_rounding_mode#12 <= 0 && -((signed int)__CPROVER_rounding_mode#12) <= 0 && head.inserted#13 <= 0 && -((signed int)head.inserted#13) <= 0 && __CPROVER_pipe_count#3 <= 0u && -((signed __CPROVER_bitvector[33])__CPROVER_pipe_count#3) <= 0 && head.$pad0#13 <= 0 && -((signed __CPROVER_bitvector[33])head.$pad0#13) <= 0 && __CPROVER_malloc_size#9 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#9) <= 0 && __CPROVER_next_thread_id#5 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_next_thread_id#5) <= 0

Adding loop invariant: TRUE
Replacing function c::__CPROVER_initialize
Recursively summarizing function c::main
Recursively summarizing function c::list_add
Recursively summarizing function c::__blast_assert

Summary for function c::__blast_assert
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::__blast_assert

Summary for function c::list_add
params: new head 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::list_add
Recursively summarizing function c::list_del
Precondition trivially holds, replacing by summary.

Summary for function c::list_del
params: entry 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::list_del
Using existing summary for function c::list_add
Replacing function c::list_add

Summary for function c::main
params: 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_malloc_size 
globals_out: __CPROVER_malloc_is_new_array#phi89 __CPROVER_deallocated#phi89 __CPROVER_malloc_object#phi89 __CPROVER_memory_leak#phi89 main#return_value#89 __CPROVER_malloc_size#phi89 
precondition: TRUE
transformer: TRUE ==> (signed __CPROVER_bitvector[66])__CPROVER_malloc_size - (signed __CPROVER_bitvector[66])main#return_value#89 <= 18446744073709551615 && (signed int)main#return_value#89 - (signed int)__CPROVER_malloc_size <= 0 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#phi89 <= 18446744073709551603 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#phi89 - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size <= 12 && main#return_value#89 <= 0 && -((signed int)main#return_value#89) <= 0 && (signed int)main#return_value#89 - (signed int)__CPROVER_malloc_size#phi89 <= 0 && (signed __CPROVER_bitvector[66])__CPROVER_malloc_size#phi89 - (signed __CPROVER_bitvector[66])main#return_value#89 <= 18446744073709551615 && __CPROVER_malloc_size#phi89 <= 18446744073709551615ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#phi89) <= 0

Adding loop invariant: TRUE
Replacing function c::main

Summary for function main
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE

Summarizing function c::__CPROVER_initialize
Summary for function c::__CPROVER_initialize exists already

Summarizing function c::__blast_assert
Summary for function c::__blast_assert exists already

Summarizing function c::malloc

Summary for function c::malloc
params: malloc_size 
returns: 
globals_in: __CPROVER_malloc_is_new_array __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak __CPROVER_malloc_size 
globals_out: __CPROVER_malloc_is_new_array#26 __CPROVER_deallocated#22 __CPROVER_malloc_object#24 __CPROVER_memory_leak#28 malloc#return_value#29 __CPROVER_malloc_size#25 
precondition: TRUE
transformer: TRUE ==> (signed __CPROVER_bitvector[65])malloc_size - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 - (signed __CPROVER_bitvector[65])malloc_size <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 <= 18446744073709551615 && (signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25 - (signed __CPROVER_bitvector[65])__CPROVER_malloc_size <= 18446744073709551615 && __CPROVER_malloc_size#25 <= 18446744073709551615ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#25) <= 0

Adding loop invariant: TRUE

Summarizing function c::list_add
Summary for function c::list_add exists already

Summarizing function c::list_del
Summary for function c::list_del exists already

Summarizing function c::main
Summary for function c::main exists already
Checking properties of main
Checking properties of c::__CPROVER_initialize
Checking properties of c::__blast_assert
negated property TRUE
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1 variables, 0 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Checking properties of c::malloc
Checking properties of c::list_add
Checking properties of c::list_del
Checking properties of c::main
[__blast_assert.1.0] error label: FAILURE

** 1 of 1 failed
VERIFICATION FAILED
