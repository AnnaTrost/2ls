SUMMARIZER version tbd
file /home/bjowac/deltacheck/branches/summary/regression/svcomp14/ldv-regression/rule60_list2.c_true.cil.c: Parsing
Converting
Type-checking rule60_list2.c_true.cil
Generating GOTO Program
Adding CPROVER library
Partial Inlining
Generic Property Instrumentation
Function Pointer Removal
Using equalities domain 
Computing SSA of main
Simplifying
Computing SSA of c::__CPROVER_initialize
Simplifying
Computing SSA of c::__blast_assert
Simplifying
Computing SSA of c::__getMemory
Simplifying
Computing SSA of c::my_malloc
Simplifying
Computing SSA of c::list_add
Simplifying
Computing SSA of c::list_del
Simplifying
Computing SSA of c::main
Simplifying

Summarizing function main
Recursively summarizing function c::__CPROVER_initialize

Summary for function c::__CPROVER_initialize
params: 
returns: 
globals_in: __CPROVER_threads_exited __CPROVER_malloc_is_new_array __CPROVER_dead_object __CPROVER_deallocated __CPROVER_malloc_object __CPROVER_memory_leak guard_malloc_counter elem head.next head.prev __CPROVER_rounding_mode __CPROVER_pipe_count __CPROVER_malloc_size __CPROVER_next_thread_id 
globals_out: __CPROVER_threads_exited#7 __CPROVER_malloc_is_new_array#13 __CPROVER_dead_object#10 __CPROVER_deallocated#9 __CPROVER_malloc_object#11 __CPROVER_memory_leak#14 guard_malloc_counter#6 elem#6 head.next#6 head.prev#6 __CPROVER_rounding_mode#15 __CPROVER_pipe_count#5 __CPROVER_malloc_size#12 __CPROVER_next_thread_id#8 
precondition: TRUE
transformer: TRUE ==> __CPROVER_rounding_mode#15 <= 0 && -((signed int)__CPROVER_rounding_mode#15) <= 0 && __CPROVER_pipe_count#5 <= 0u && -((signed __CPROVER_bitvector[33])__CPROVER_pipe_count#5) <= 0 && __CPROVER_malloc_size#12 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_malloc_size#12) <= 0 && __CPROVER_next_thread_id#8 <= 0ul && -((signed __CPROVER_bitvector[65])__CPROVER_next_thread_id#8) <= 0

Adding loop invariant: TRUE
Replacing function c::__CPROVER_initialize
Recursively summarizing function c::main
Recursively summarizing function c::list_add
Recursively summarizing function c::__blast_assert

Summary for function c::__blast_assert
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::__blast_assert

Summary for function c::list_add
params: new head 
returns: 
globals_in: elem 
globals_out: elem#phi52 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::list_add
Recursively summarizing function c::list_del

Summary for function c::list_del
params: entry 
returns: 
globals_in: elem 
globals_out: elem#phi66 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::list_del
Using existing summary for function c::list_add
Replacing function c::list_add
Using existing summary for function c::list_add
Replacing function c::list_add
Recursively summarizing function c::my_malloc
Recursively summarizing function c::__getMemory
Precondition trivially holds, replacing by summary.

Summary for function c::__getMemory
params: size 
returns: 
globals_in: guard_malloc_counter 
globals_out: __getMemory#return_value#phi33 guard_malloc_counter#24 
precondition: TRUE
transformer: TRUE ==> guard_malloc_counter != guard_malloc_counter#24

Adding loop invariant: guard_malloc_counter != guard_malloc_counter#24
Replacing function c::__getMemory

Summary for function c::my_malloc
params: size 
returns: 
globals_in: 
globals_out: __getMemory#return_value#35 my_malloc#return_value#37 
precondition: TRUE
transformer: TRUE ==> __getMemory#return_value#35 == my_malloc#return_value#37

Adding loop invariant: __getMemory#return_value#35 == my_malloc#return_value#37
Replacing function c::my_malloc
Using existing summary for function c::my_malloc
Replacing function c::my_malloc

Summary for function c::main
params: 
returns: 
globals_in: 
globals_out: my_malloc#return_value#phi103 main#return_value#103 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE
Replacing function c::main

Summary for function main
params: 
returns: 
globals_in: 
globals_out: 
precondition: TRUE
transformer: TRUE ==> TRUE

Adding loop invariant: TRUE

Summarizing function c::__CPROVER_initialize
Summary for function c::__CPROVER_initialize exists already

Summarizing function c::__blast_assert
Summary for function c::__blast_assert exists already

Summarizing function c::__getMemory
Summary for function c::__getMemory exists already

Summarizing function c::my_malloc
Summary for function c::my_malloc exists already

Summarizing function c::list_add
Summary for function c::list_add exists already

Summarizing function c::list_del
Summary for function c::list_del exists already

Summarizing function c::main
Summary for function c::main exists already
Checking properties of main
Checking properties of c::__CPROVER_initialize
Checking properties of c::__blast_assert
negated property TRUE
Post-processing
Solving with MiniSAT 2.2.0 with simplifier
1 variables, 0 clauses
SAT checker: negated claim is SATISFIABLE, i.e., does not hold
Checking properties of c::__getMemory
Checking properties of c::my_malloc
Checking properties of c::list_add
Checking properties of c::list_del
Checking properties of c::main
[__blast_assert.1.0] error label: FAILURE

** 1 of 1 failed
VERIFICATION FAILED
